################################################################################
#
#                   LOCAL SETTINGS, MAKE YOUR CHANGES HERE!
# 
# These settings over-ride those in settings.py
# This is where you should make all your changes.
#
# If you do not have a local_settings.py, copy or rename
# local_settings.py.template to local_settings.py and follow the instructions.
#
# If you would like to change a setting that is not in local_settings.py, copy
# it from the settings.py file and make ALL changes here, in local_settings.py
#
################################################################################


# Path to the GeoLite City(required) and Geo Organization(optional) databases
# from MaxMind. GeoLite City is free for most uses. See license on site.
# Latest version of GeoLite City can be downloaded from
# http://dev.maxmind.com/geoip/legacy/geolite
GEOLITECITY_ABSOLUTE_PATH = "/var/www/example/GeoIP/GeoLiteCity.dat"
GEOORGANIZATION_ABSOLUTE_PATH = "/var/www/example/GeoIP/GeoOrganization.dat"

# use DEBUG = False in production!
DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    #('example', 'example@example.com'),
)
MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',# Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': '/tmp/uvcdat/usage/usage.db',  # Or path to database file if using sqlite3.
        'USER': '',                            # Not used with sqlite3.
        'PASSWORD': '',                        # Not used with sqlite3.
        'HOST': '',                            # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                            # Set to empty string for default. Not used with sqlite3.
    }
}

# Make this unique, and don't share it with anybody.
# The default one is 62 characters long and looks something like this:
# SECRET_KEY = '7u&amp;*d3di%e*7fuu$^-eeteu(mk_e+usb3$g7jv9a%&amp;!&amp;#eyt#-'
#
# You can generate a new one on the command line like so:
# python -c 'import random; print "".join([random.choice("abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)") for i in range(62)])'
SECRET_KEY = '7u&amp;*d3di%e*7fuu$^-eeteu(mk_e+usb3$g7jv9a%&amp;!&amp;#eyt#-'

# A list of strings representing the host/domain names that this Django site can serve.
# This is a security measure to prevent an attacker from poisoning caches and password
# reset emails with links to malicious hosts by submitting requests with a fake HTTP Host
# header, which is possible even under many seemingly-safe webserver configurations.
ALLOWED_HOSTS = ['uvcdat.llnl.gov', '127.0.0.1', 'localhost']

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# In a Windows environment this must be set to your system time zone.
TIME_ZONE = 'America/Los_Angeles'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = '/tmp/uvcdat/usage/app/media/'

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = 'http://localhost:8080/media/'

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# To deploy, run `python manage.py collectstatic`
#
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = '/var/www/uvcdat.llnl.gov/usage/'

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = 'http://127.0.0.1/static/'

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'console':{
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'filters': ['require_debug_false'],
            'formatter': 'verbose'
        },
        'file':{
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins', 'console'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}
